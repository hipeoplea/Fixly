#import "prelude.typ": *

#let precedent-table(..args) = table(
  columns: (1fr, 3fr),
    inset: (x: 1em, y: 0.5em),
    stroke: (x: 0.5pt, y: 0.5pt),
    align: (left, top),
    ..args,
)

#let fr(number, text) = [
  *FR#number*: #text\
]

#let u(number, text) = [
  *UR#number*: #text\
]

#let r(number, text) = [
  *RR#number*: #text\
]

#let p(number, text) = [
  *PR#number*: #text\
]

#let s(number, text) = [
  *SR#number*: #text\
]

#let first-part = [
#struct[1 часть]

*1. Предметная область*

С преподавателем согласована предметная область: "Информационна система для платформы аренды инструментов Fixly".

*2. Подробное текстовое описание предметной области*

Fixly - это сервис аренды инструментов по принципу «от пользователя к пользователю».
Система предназначена для упрощения поиска, сдачи и аренды различных инструментов (строительных, бытовых, специализированных) без необходимости приобретения их в собственность.

*Ключевые аспекты предметной области*

+ *Создание и управление объявлениями*

  - Пользователь может выставить новое объявление с описанием инструмента, фотографиями, ценой аренды и условиями залога.

  - Для удобства добавляется календарь дат и временных отрезков в которые доступен инструмент, а так же его геолокация (местоположение инструмента на карте).

  - Объявления могут быть в состояниях: «доступное», «сдано», «в архиве».

  - Редактирование и удаление объявления осуществляется из личного кабинета.

+ *Поиск и фильтрация*

  - Инструменты можно искать по названию, ключевым словам или по описанию .

  - Доступна фильтрация по категории, цене, датам доступности.

  - Возможен просмотр объявлений на карте с указанием цен.

  - Пользователь может добавлять объявления в избранное для быстрого доступа.

+ *Аренда и взаимодействие пользователей*

  - После того как арендатор нажимает «Арендовать», если у аарендодателя не установлено автоподтверждение, то у него есть до 24 часов на подтверждение аренды.

  - После подтверждения заявка считается действительной, и аренда активируется.

  - По завершении аренды стороны могут оставить отзывы друг о друге.

  - Возможен залог за инструмент (фиксируется в условиях сделки).

  - Пользователи могут вести переписку через встроенные личные сообщения.

  - Договора аренды автоматически генерируются при подтверждении заявок и подписываются электронной подписью.

+ *Управление учетной записью*

  - Пользователь создает аккаунт и входит в систему через личный кабинет, используя протолокол OAuth2.

  - В личном кабинете отображаются данные аккаунта, активные и архивные объявления, избранные позиции.

  - Доступно редактирование личных данных и настройка уведомлений.

+ *Отзывы, рейтинг и модерация*

  - После каждой аренды пользователи оставляют отзывы, которые формируют репутацию, отзыв состоит из оценки по пятибальной шкале, а так же текстового поля, где пользователь при желании может подробно рассказать свои впечатления от процесса аренды.

  - Объявления и отзывы могут быть помечены флажками при нарушениях.

  - Система предусматривает обращение в поддержку при спорных ситуациях.

  - Администратор контролирует корректность контента и рассматривает жалобы.

+ *Транзакции и безопасность*

  - Система фиксирует все действия пользователей: создание и изменение объявлений, аренду, отзывы, жалобы.

  - Все платежи взимаются при помощи платёжной системы юмани.

  - При аренде может взиматься залог, что обеспечивает дополнительную защиту.

  - В случае возникновния конфликтных ситуаций, залог удерживается системой, до окончательного решения в пользу одной из сторон.

  - История аренды и переписок хранится в течении трёх лет(срок исковой давности) для прозрачности и разрешения конфликтов.

*3. Зачем нужна информационная система и решаемые ей задачи*

Fixly нужен для того, чтобы показывать объявления об аренде инструментов предоставляя арендодателям платформу для размещения своих объявлений, а пользователям возможность выбора из большого количества предложений, без необходимости поиска по разным ресурсам.
Он фиксирует, кто создал аккаунт и объявление, какие инструменты доступны и в какие даты, кто и на каких условиях их арендует.
Система автоматизирует обработку заявок, обмен сообщениями и хранение отзывов.
Она обеспечивает прозрачность сделок: арендатор вносит залог и получает подтверждение, владелец инструмента — защиту от рисков, а обе стороны — историю взаимодействия.
Без такой системы всё быстро сведётся к случайным чатам, устным договорённостям и потерянным данным.

*Задачи решаемые системой*

+ *Хранение и структурирование объявлений об инструментах* - пользователям не нужно искать объявления по разным платформам, а у арендаторов появляется удобная платформа для размещения объявлений.

+ *Ведение личных сообщений и истории взаимодействий* - упрощает создание коммуникацию между арендаторами и арендодателями, а так же является гарантом для решения спорных ситуаций.

+ *Управление отзывами и репутацией пользователей* - помогает арендаторам не натыкаться на недобросоветных арендодателей и наоборот.

+ *Поиск и фильтрация по названию, категориям, дате доступности и геолокации* - упрощает поиск подходящего объявления, а так же помогает найти инструмент максимально близко к вам.

+ *Оформление аренды с учётом залога и подтверждения* - помогает арендодателю обеспечить материальную безопасность своего инструмента.

+ *Штрафы за просрочку* - мотивирует арендаторов возвращать вовремя, а арендодателям помогает не упустить выгоду.

*4. Функциональные и нефункциональные требования*

*Функциональные требования*\
#fr(1, [Поиск инструментов по названию и ключевым словам])
#fr(2, [Фильтрация объявлений по категории, цене, датам и местоположению])
#fr(3, [Просмотр объявлений на карте с указанием цен])
#fr(4, [Отображение доступных дат аренды инструмента])
#fr(5, [Подача заявки на аренду инструмента])
#fr(6, [Подтверждение аренды владельцем инструмента])
#fr(7, [Возможность отмены аренды арендатором и арендодателем])
#fr(8, [Учёт залога и условий возврата инструмента])
#fr(9, [Завершение сделки с возможностью оставить отзыв])
#fr(10, [Обмен личными сообщениями между пользователями])
#fr(11, [Уведомления о новых заявках, сообщениях и изменении статуса сделки])
#fr(12, [Возможность жалобы на пользователя или сделку])
#fr(13, [Оставление отзывов после завершения аренды и формирование рейтинга])
#fr(14, [Добавление пользователей в черный список])
#fr(15, [Добавление объявления в избранное и управление списком избранного])
#fr(16, [Модерация контента администратором])
#fr(17, [Управление пользователями (бан/разбан, просмотр жалоб) администратором])
#fr(18, [Обращения в поддержку и ведение истории сделок для решения конфликтных ситуаций])

*Нефункциональные требования*

- *Требование к удобству использования*\
    #u(1, [Сайт должен корректно отображаться и функционировать во всех популярных браузерах (Google Chrome 110, Mozilla Firefox 110, Safari 11, Microsoft Edge 80, Яндекс 17)])
    #u(2, [Система должна поддерживать адаптивный дизайн, который автоматически подстраивается под размеры экрана устройства (мобильных телефонов, планшетов, десктопов])
    #u(3, [Главные разделы системы должны быть вынесены в шапку профиля и должны быть доступны из любого места])
    #u(4, [Для системных ответов об ошибках пользователю отображается понятное сообщение с пояснением возможных причин и способов решения.])

- *Требования к производительности*\
    #p(1, [Платформа должна поддерживать не менее 1000 одновременных пользователей без потери производительности])
    #p(2, [Время отклика на запросы поиска не должно превышать 3 секунд])
    #p(3, [Среднее время загрузки страницы с результатами поиска не должно превышать 2 секунд])
    #p(4, [Время отклика при оформлении аренды не должно превышать 5 секунд])

- *Требование к надежности*\
    #r(1, [Система должна быть доступна 70% времени, за исключением запланированных периодов технического обслуживания])
    #r(2, [При программных сбоях сервисов она должна автоматически восстанавливаться в течение 5 минут])
    #r(3, [В случае сбоя системы она должна предоставлять пользователю информацию о проблеме и предложить варианты для продолжения работы])
    #r(4, [Платформа должна обеспечивать полную целостность данных даже в случае нештатных ситуаций])
    #r(5, [Все изменения и действия пользователей должны фиксирововаться в журнале системы для обеспечения аудита и восстановления данных])
    #r(6, [Система должна поддерживать регулярное резервное копирование данных, чтобы предотвратить их потерю])
     #r(7, [Система должна иметь автоматические модульные и интеграционные тесты, обеспечивающие покрытие не менее 50% строк кода по результатам анализа JaCoCo])

- *Требование к безопасности и поддерживаемости*\
    #s(1, [Все персональные и платежные данные должны быть зашифрованы как при передаче, так и при хранении в базе данных])
    #s(2, [Система должна поддерживать двухфакторную аутентификацию (2FA) для пользователей и администраторов])
    #s(3, [Платформа должна предоставлять возможность пользователям изменять свои пароли и защищать свои аккаунты через настройки безопасности])
    #s(4, [При попытке несанкционированного входа в систему должен быть активирован механизм временной блокировки аккаунта на 30 минут])
    #s(5, [Система должна включать функцию уведомлений о любых действиях с конфиденциальной информацией, таких как изменение личных данных пользователя])

*5. Модели основных прецедентов*

#precedent-table(
  [Прецедент], [Создать аккаунт],
  [ID], [0],
  [Краткое описание], [Пользователь создает новый аккаунт для пользования платформой],
  [Главный актер], [Пользователь],
  [Второстепенные актеры], [Система],
  [Предусловия], [Пользователь зашел на страницу регистрации],
  [Основной поток], [
    1. Пользователь открывает страницу регистрации.
    2. Пользователь вводит e-mail, пароль и контактные данные.
    3. Система сохраняет данные в базе.
    4. Система отправляет подтверждение на e-mail.
    5. Пользователь подтверждает регистрацию.
  ],
  [Альтернативный поток], [Пользователь уже имеет аккаунт в системе → Предложить авторизацию или восстановление пароля],
  [Постусловия], [Пользователь имеет аккаунт в системе]
)

#precedent-table(
  [Прецедент], [Создание объявления],
  [ID], [1],
  [Краткое описание], [Пользователь выкладывает объявление об аренде инструмента],
  [Главный актер], [Пользователь],
  [Второстепенные актеры], [Система],
  [Предусловия], [Пользователь авторизован; находится в личном кабинете],
  [Основной поток], [
    1. Пользователь заходит в личный кабинет → «Добавить объявление».
    2. Пользователь вводит название, описание, фото, цену и доступные даты.
    3. Система проверяет заполнение обязательных полей.
    4. Система сохраняет объявление в базе.
    5. Система проверяет объявление, возможно отправляет на ручную проверку.
    6. Система выставляет новое объявление.
  ],
  [Альтернативный поток], [Объявление не прошло автоматическую проверку → Система отправляет уведомление о дополнительной проверке],
  [Постусловия], [Объявление создано и возможно отправлено на проверку или отклонено]
)


#precedent-table(
  [Прецедент], [Поиск по ключевому слову],
  [ID], [2],
  [Краткое описание], [Пользователь ищет инструмент по названию или ключевому слову],
  [Главный актер], [Пользователь],
  [Второстепенные актеры], [Система],
  [Предусловия], [Пользователь находится на главной странице],
  [Основной поток], [
    1. Пользователь открывает главную страницу.
    2. Пользователь вводит ключевое слово (например, «дрель»).
    3. Система ищет совпадения в базе объявлений.
    4. Система сортирует результаты по релевантности.
    5. Система выводит список объявлений.
  ],
  [Альтернативный поток], [Нет совпадений → Система показывает сообщение об отсутствии результатов],
  [Постусловия], [Отображается список подходящих объявлений для пользователя]
)

#precedent-table(
  [Прецедент], [Взятие в аренду],
  [ID], [3],
  [Краткое описание], [Пользователь создает заявку на аренду инструмента на выбранные даты],
  [Главный актер], [Пользователь],
  [Второстепенные актеры], [Система, Владелец инструмента],
  [Предусловия], [Пользователь выбрал инструмент и даты аренды],
  [Основной поток], [
    1. Пользователь выбирает инструмент и даты аренды.
    2. Система создает заявку на аренду.
    3. Система отправляет уведомление владельцу о заявке.
    4. Владелец подтверждает заявку.
    5. Система бронируюи инсрумент на платформе
  ],
  [Альтернативный поток], [Заявка отклонена владельцем или → Система уведомляет пользователя о решении],
  [Постусловия], [Создана заявка на аренду, ожидается подтверждение владельца]
)

#precedent-table(
  [Прецедент], [Администратор проверяет объявление],
  [ID], [4],
  [Краткое описание], [Администратор проверяет корректность и соответствие правилам объявления],
  [Главный актер], [Администратор],
  [Второстепенные актеры], [Система],
  [Предусловия], [Объявление отправлено на проверку; администратор авторизован],
  [Основной поток], [
    1. Администратор открывает список необработанных объявлений.
    2. Администратор открывает конкретное объявление, проверяет текст, фото и цену.
    3. Администратор ставит статус «Пройдено проверку», если объявление соответствует правилам.
    4. Система уведомляет пользователя о результате проверки.
  ],
  [Альтернативный поток], [Объявление не соответствует правилам → Администратор ставит статус «Проверка не пройдена» и уведомляет пользователя],
  [Постусловия], [Объявление опубликовано или отклонено с указанием причины]
)

*6. Предложенная архитектура системы*

Для построения информационной системы будет использоваться многослойная архитектура, состоящая из трех уровней - *Клиент-серверная архитектура*

*Основные модули:*

- *Фронтэнд*

Обеспечивает взаимодействие с конечным пользователем и будет реализован с использованием Vue.js. Так же будет добавлена поддержка адаптивного дизайна для различных устройств и интернационализация (русский и английский). Взаимодейтвие с серверной частью будет происходить через REST.

- *Бэкэнд*

- *База данных*

Для нашего проекта мы выбрали базу данных PostgreSQL

*Технологии и фреймворки*

#table(
    columns: (10em, 10em),
    align: center,
    table.header(
        [*Backend*], [*Frontend*]
    ),
    [Java\
    Spring Boot\
    PostgreSQL\
    Kafka\
    Redis\
    Testcontainers\
    JUnit\
    Mockito\
    Grafana\
    Prometheus\
    Gradle\
    Docker\
    Kubernates\
    Spotless\
    Error Prone\
    OpenAPI (Swagger)\
    OpenAPI Generator\
    ],
    [TypeScript\
    Vue.js\
    Vue Router\
    Pinia
    ]
)

#table(
    columns: (20em),
    align: center,
    table.header(
        [*Общие требования*]
    ),
    [Использование линтеров и форматтеров:\
    – для Java: Spotless + Checkstyle + Error Prone\
    – для TypeScript/Vue: ESLint + Prettier\
    Все тесты обязательно прогоняются в CI на каждом новом коммите\
    Автоматический деплой в окружения (CD)]
)
]
